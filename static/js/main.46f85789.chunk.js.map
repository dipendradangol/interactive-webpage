{"version":3,"sources":["logo.png","car.jpg","components/Car.js","components/Loader.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Car","className","src","car","alt","React","Component","Loader","Navbar","id","App","props","toggleSpin","e","setState","prevState","spinLogo","console","log","state","loading","cars","bind","setTimeout","document","getElementById","style","display","logo","this","onMouseEnter","onMouseLeave","map","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,0TCuB5BC,G,uLAjBP,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKC,IAAKF,UAAW,YAAaG,IAAK,QAC5C,yBAAKH,UAAY,aACb,yCAAc,0BACdA,UAAU,eADI,QAEd,oI,GARFI,IAAMC,YCWTC,G,MAZA,kBACX,6BACI,yBAAKN,UAAU,mBACX,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,yBCOZO,G,uLAXP,OACI,yBAAKC,GAAG,cAAcR,UAAU,qCAC5B,yCACA,yCACA,yCACA,+C,GAPKI,IAAMC,YCoFZI,E,YA7Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAOA,KAkCTC,WAAW,SAACC,GACV,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BC,UAAWD,EAAUC,YAEvBC,QAAQC,IAAI,EAAKC,MAAMH,WArCvB,EAAKG,MAAQ,CACXC,SAAS,EACTJ,UAAU,EACVK,KAAM,CACJ,CACEZ,GAAI,GAEN,CACEA,GAAI,GAEN,CACEA,GAAI,GAEN,CACEA,GAAI,KAOV,EAAKG,WAAa,EAAKA,WAAWU,KAAhB,gBAvBD,E,iFA0BC,IAAD,OACjBC,WAAW,WACT,EAAKT,SAAS,CACZM,SAAS,KAEV,O,sCAYHI,SAASC,eAAe,eACvBC,MAAMC,QAAU,U,+BAIjB,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAEhB,yBACAC,IAAK0B,IACH3B,UAAW4B,KAAKV,MAAMH,SAAW,kBAAoB,sCACrDZ,IAAI,OACJ0B,aAAcD,KAAKjB,WACnBmB,aAAcF,KAAKjB,aAGnBiB,KAAKV,MAAMC,QAAU,kBAAC,EAAD,MACrB,yBAAKnB,UAAU,YAEX4B,KAAKV,MAAME,KAAKW,IAAI,SAAA7B,GAAG,OACrB,kBAAC,EAAD,CAAK8B,IAAM9B,EAAIM,c,GAlEfJ,IAAMC,WCGJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShB,SAASC,eAAe,SD2H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.46f85789.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47e1f318.png\";","module.exports = __webpack_public_path__ + \"static/media/car.f58239f1.jpg\";","import React from 'react';\r\nimport car from '../car.jpg'\r\nimport './Car.css';\r\n\r\nclass Car extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\" car \">\r\n                <img src={car} className={\"car-image\"} alt={\"Car\"}></img>\r\n                <div className = \"container\">\r\n                    <h3>Tuned car <span\r\n                    className=\"horse-power\">500</span></h3>\r\n                    <p>\r\n                    Lorem Ipsum is simply dummy text\r\n                     of the printing and typesetting \r\n                     industry. Lorem Ipsum has been \r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Car;","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => (\r\n    <div>\r\n        <div className=\"sk-folding-cube\">\r\n            <div className=\"sk-cube1 sk-cube\"></div>\r\n            <div className=\"sk-cube2 sk-cube\"></div>\r\n            <div className=\"sk-cube3 sk-cube\"></div>\r\n            <div className=\"sk-cube4 sk-cube\"></div>\r\n\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Loader;","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends React.Component {\r\n    render(){\r\n        return(\r\n            <div id=\"nav-sidebar\" className=\"nav-content animated bounceInLeft\">\r\n                <div>Homepage</div>\r\n                <div>About us</div>\r\n                <div>Services</div>\r\n                <div>promotion</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport logo from './logo.png';\r\nimport './App.css';\r\nimport './animate.css';\r\nimport Car from './components/Car';\r\nimport Loader from './components/Loader';\r\nimport Navbar from './components/Navbar';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super (props);\r\n    this.state = {\r\n      loading: true,\r\n      spinLogo: true,\r\n      cars: [\r\n        {\r\n          id: 0\r\n      },\r\n        {\r\n          id: 1\r\n      },\r\n        {\r\n          id: 2\r\n      },\r\n        {\r\n          id: 3\r\n      }\r\n    ]\r\n\r\n    }\r\n    // this is done so that the value of 'this'\r\n    // would be accessible within toggleSpin method\r\n    this.toggleSpin = this.toggleSpin.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    setTimeout(() =>{\r\n      this.setState({\r\n        loading: false\r\n      })\r\n    }, 3000);\r\n\r\n  }\r\n\r\n  toggleSpin=(e)=>{\r\n    this.setState(prevState => ({\r\n      spinLogo: !prevState.spinLogo\r\n    }));\r\n    console.log(this.state.spinLogo)\r\n  }\r\n\r\n  showNavigator (){\r\n    document.getElementById('nav-sidebar')\r\n    .style.display = 'block';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <header className=\"App-header\">\r\n\r\n          <img \r\n          src={logo} \r\n            className={this.state.spinLogo ? \"App-logo-static\" : \"App-logo-static animated rubberBand\"}\r\n            alt=\"logo\" \r\n            onMouseEnter={this.toggleSpin}\r\n            onMouseLeave={this.toggleSpin}\r\n          />\r\n          {\r\n            this.state.loading ? <Loader /> : \r\n            <div className=\"car-list\">\r\n              {\r\n                this.state.cars.map(car => (\r\n                  <Car key ={car.id}></Car>\r\n                ))\r\n              }\r\n            </div>\r\n          }\r\n        \r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}